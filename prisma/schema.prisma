// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  login     String   @unique
  password  String
  version   Int      @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Artist {
  id     String  @id @default(uuid())
  name   String
  grammy Boolean @default(false)
  albums Album[]
  tracks Track[]
  favourite FavouriteArtist?

  @@map("artists")
}

model Album {
  id        String  @id @default(uuid())
  name      String
  year      Int
  artistId  String?
  artist    Artist? @relation(fields: [artistId], references: [id])
  tracks    Track[]
  favourite FavouriteAlbum?

  @@map("albums")
}

model Track {
  id       String  @id @default(uuid())
  name     String
  artistId String?
  artist   Artist? @relation(fields: [artistId], references: [id])
  albumId  String?
  album    Album?  @relation(fields: [albumId], references: [id])
  duration Int
  favourite FavouriteTrack?

  @@map("tracks")
}

model FavouriteAlbum {
  id      Int    @id @default(autoincrement())
  albumId String @unique
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@map("fav_albums")
}

model FavouriteArtist {
  id       Int    @id @default(autoincrement())
  artistId String @unique
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@map("fav_artists")
}

model FavouriteTrack {
  id      Int    @id @default(autoincrement())
  trackId String @unique
  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@map("fav_tracks")
}
